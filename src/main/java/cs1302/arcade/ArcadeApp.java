package cs1302.arcade;

import java.util.Random;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.layout.HBox;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;

/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */
public class ArcadeApp extends Application {

    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(20, 20); // some rectangle

    // main menu variables
    Vbox vBox;
    HBox cContainer;
    Hbox rContainer;
    Scene menuScene;
    Scene cScene;
    Scene rScene;
    Menu menu;
    MenuItem exit;
    MenuBar menuBar;
    Button cButton; // centipede start
    Button rButton; // reversi start
    TextField cInstructions;
    TextField rInstructions;


    // event handlers
    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> createMouseHandler() {
        return event -> {
            System.out.println(event);
            r.setX(rng.nextDouble() * (640 - r.getWidth()));
            r.setY(rng.nextDouble() * (480 - r.getHeight()));
        };
    } // createMouseHandler

    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    private EventHandler<? super KeyEvent> createKeyHandler() {
        return event -> {
            System.out.println(event);
            switch (event.getCode()) {
            case LEFT:  // KeyCode.LEFT
                if(r.getX() <= 0 ) {
                    r.setX(0.0);
                } else {
                    r.setX(r.getX() - 10.0);
                } //else
                break;
            case RIGHT: // KeyCode.RIGHT
                if(r.getX() > 600) {
                    r.setX(620);
                } else {
                    r.setX(r.getX() + 10.0);
                } //else
                break;
            default:
                // do nothing
            } // switch
            // TODO bounds checking
        };
    } // createKeyHandler

    private EventHandler<ActionEvent> exitApp = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {
                System.exit(0);
            }
        };

    private EventHandler<ActionEvent> startCentipede = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {
                stage.setTitle("Centipede");
                stage.setScene(cScene);
                stage.sizeToScene();
                stage.show();
            }
        };

    private EventHandler<ActionEvent> startReversi = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent e) {
                stage.setTitle("Reversi");
                stage.setScene(rScene);
                stage.sizeToScene();
                stage.show();
            }
        };

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        vBox = new vBox();
        cContainer = new HBox();
        rContainer = new Hbox();
        menuScene = new Scene(vBox, 640, 480);
        cScene = new Scene(640, 480);
        rScene = new Scene(640, 480);
        menu = new Menu("File");
        exit = new MenuItem("Exit");
        menuBar = new menuBar();
        cButton = new Button("Centipede");
        rButton = new Button("Reversi");
        cInstructions = new TextField("Fill in later");
        rInstructions = new TextField("Fill in later");

        // add children to parents
        cContainer.getChildren().addAll(cButton, cInstructions);
        rContainer.getChildren().addAll(rButton, rInstructions);
        menu.getItems().add(exit);
        menuBar.getMenus().add(menu);
        vBox.getChildren().addAll(menuBar, cContainer, rContainer);
        group.getChildren().add(r);                // add to main container

        // generate events
//        r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly
        group.setOnKeyPressed(createKeyHandler()); // left-right key presses move the rectangle
        menu.setOnAction(exitApp);
        cButton.setOnAction(startCentipede);
        rButton.setOnAction(startReversi);

        //      Scene scene = new Scene(group, 640, 480);
        Scene centiped = centipede();
        stage.setTitle("cs1302-arcade!");
        stage.setScene(centiped);
        stage.sizeToScene();
        stage.show();

        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        group.requestFocus();

    } // start

    private Scene centipede() {
        Scene centipede = new Scene(group, 640, 480);
        r.setX(320);
        r.setY(460);
        // || r.get(x) < = 0) {
        return centipede;
    } //centipede

} // ArcadeApp
